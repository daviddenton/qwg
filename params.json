{"name":"Qwg","tagline":"A Chrome browser extension which converts the Omnibox (the multi-use URL bar) into a keyboard launcher tool for the browser, based on a configuration schema that you supply.","body":"##*Qwg*   _noun_   _\\ˈkw-eeg\\_\r\n\r\nA Chrome browser extension that converts the Omnibox (the multi-use URL bar) into a predictive bookmark launcher for the browser, based on a configuration tree that you supply. An additional mode for searching the tree via the context-menu (right-click) is also supported.\r\n\r\nIn it's simplest form, Qwg can be used to launch public webpages with content based on the inputted query (e.g. for search engines other than Google).  A more realistic (and advanced) real-world example would be to use it for consistently presented access to URL-based services in multiple development environments (dev/test/prod).\r\n\r\n###Installation\r\nCurrently, Qwg is not available in the Chrome Web Store, but it can be installed by downloading the .crx package file from Github and then manually dragging this file into the Chrome [Extensions option](chrome://chrome/extensions/) page.\r\n\r\n###Usage\r\n\r\n####Omnibox\r\nQwg can be activated by typing 'qwg' into the Chrome Omnibox and then hitting &lt;space&gt;. Then there are 2 options:\r\n\r\n1. To see a list of available completions, hit &lt;space&gt; again. This will bring up a list of options based on the Qwg engine walking the configuration tree (see below for more details). Selecting one of these options with &lt;space&gt; will bring up the next tier of completions.\r\n\r\n2. If you know the query that you want to run, just keep typing. Qwg will automatically narrow down the available completions as you type.\r\n\r\n####An example\r\nFor the configuration:\r\n ```javascript\r\n {\r\n    ask: \"http://ask.com/$QUERY$\",\r\n    bing: \"http://bing.com/$QUERY$\",\r\n    google: \"http://google.com/$QUERY$\",\r\n    wolfram: \"http://wolfram.com/$QUERY$\"\r\n}\r\n```\r\na query of `qwg ask lolcats` will search `ask.com` for some cute felines.\r\n\r\n![qwg omnibox menu](http://github.com/daviddenton/qwg/raw/master/qwg/docs/omnibox.png \"Omnibox\")\r\n\r\n###Context-menu\r\nSelect some text in the browser and then right-click to navigate the configuration tree using the context-menu using the selected text as the end query. For the above example, you'd highlight the word `lolcats` then right-click and select `Qwg -> ask` to achieve the same result.\r\n\r\n![qwg context menu](http://github.com/daviddenton/qwg/raw/master/qwg/docs/context.png \"Context\")\r\n\r\n####Configuration\r\nOpening the Qwg extension options tab will display an inline editor. The configuration tree is coded in JavaScript and which should resolve to a valid JavaScript object, whose properties make up the tree of available completions presented to the user. The nature of the configration code should be purely functional (ie. have no side-effects), as it will be executed at various points in the extension lifecycle.\r\n\r\nDynamic trees can be generated by embedding functions in the configuration object. The functions have the signature `aFunction(unmatchedQuery)` and return either a URL `String` (for leaf nodes) or an `Object` (whose properties make up the subsequent set of completions).\r\n\r\nThe default configuration of the extension has examples of the various available options for tree resolution.\r\n\r\n####A note on security\r\nDue to the nature of Qwg using user-defined JavaScript scripts, the Chrome API requires that all such code be executed in a sandboxed environment, which places some limitations on what can be executed. The configuration object cannot therefore load external JavaScript files.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}